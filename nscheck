#!/usr/bin/perl

# TODO:
# - Ability to turn off flags, eg. --nslookup=0
# - Consistent error handling and show certain errors in web interface
# - Explicitly check whether NS servers are different than servers reported by
#     the TLD servers. If so, query both independently to show differences
# - Optionally check local stuff (/etc/resolv.conf, /etc/named.conf, /var/named,
#     cPanel stuff, etc.

#use 5.008008;
use strict;
use warnings;

use Getopt::Long;
use Data::Dumper;

# Globals
my $VERSION = '1';
my $RELEASE = '0';
my %module_availability = (
    'Domain::PublicSuffix' => 0,
    'Net::DNS' => 0,
    'LWP::Simple' => 0,
);
my @resolvers = get_system_resolvers();
@resolvers = ('8.8.8.8', '8.8.4.4') unless scalar @resolvers;
my $domain;
my @domain_levels;
my $tld;
my $etld;
my %options;
my $root_domain;
my @suffixes_to_query;
my $etld_database_file = '/tmp/effective_tld_names.dat';
my $effective_tld_names_url = 'http://mxr.mozilla.org/mozilla-central/source/' .
        'netwerk/dns/effective_tld_names.dat?raw=1';
my $hr_bold = "\n" . '#' x 50 . "\n";
my $hr = "\n" . '-' x 50 . "\n";

# Default options
%options = (
    'brief'         => 0,
    'check-all'     => 0,
    'debug'         => 0,
    'dig'           => 0,
    'help'          => 0,
    'ipv6'          => 0,
    'manual'        => 0,
    'net-dns'       => 1,
    'nslookup'      => 1,
    'public-suffix' => 1,
    'resolver'     => '',
    'show-servers'  => 0,
    'verbose'       => 0,
    'version'       => 0
);

# Process command line arguments
process_args();

# Conditionally use certain modules
set_module_availability(\%module_availability);

# DEBUG START # pretend certain modules are not available
#$module_availability{'Domain::PublicSuffix'} = 0;
#$module_availability{'Net::DNS'} = 0;
#$module_availability{'LWP::Simple'} = 0;
#print Dumper(%module_availability);exit;
# DEBUG END #

# Download effective_tld_names.dat if necessary
download_effective_tld_database($etld_database_file, $effective_tld_names_url);

# Use Domain::PublicSuffix if available to determine the domain's "public
# suffix", also called "effective tld" or "etld".
if ($options{'public-suffix'} and $module_availability{'Domain::PublicSuffix'}) {
    my $public_suffix = Domain::PublicSuffix->new({
        'data_file' => $etld_database_file
    });
    $root_domain = $public_suffix->get_root_domain($domain);

    if ( $public_suffix->error ) {
        printf( "%12s: %s\n", 'Error', $public_suffix->error );
        exit(1);
    }
    else {
        $tld = $public_suffix->tld;
        $etld = $public_suffix->suffix;
        push(@suffixes_to_query, $etld);
        push(@suffixes_to_query, $tld) if $tld ne $etld;
    }
}

# If Domain::PublicSuffix is not available, figure out suffixes using
# downloaded database file
else { 
    if (-e $etld_database_file) {
        my $get_suffixes_result = get_suffixes($etld_database_file, $domain);

        $tld = $get_suffixes_result->{tld};
        @suffixes_to_query = reverse( # Reverse so that public suffix is first
                @{$get_suffixes_result->{possible_suffixes}});
        $etld = $suffixes_to_query[0];
 
        for (1..scalar @domain_levels - 1) {
            if ($etld eq join('.', @domain_levels[-$_..-1])) {
                $root_domain = @domain_levels[-($_ + 1)] . '.' . $etld;
            }
        }
        $root_domain = $domain unless $root_domain;
    }
    # No public suffix database file
    else {
        $root_domain = $domain; # Assume user provided root domain
        if (scalar @domain_levels > 3) { # Prune to 3 parts maximum
            @domain_levels = @domain_levels[-3..-1];
        }
        if (scalar @domain_levels > 2) { # If 3 parts, assume 2-part etld
            $etld = join('.', @domain_levels[-2..-1]);
        }
        push(@suffixes_to_query, $etld);
        push(@suffixes_to_query, $tld) if $tld ne $etld;

        # Remove any subdomain parts that still remain in root domain
        $root_domain =~ s/\.$etld//;
        my @stem_parts = split(/\./, $root_domain);
        $root_domain = $stem_parts[-1] . '.' . $etld;
    }
}

# Print out domain and tld summary
unless ($options{'brief'}) {
    print $hr_bold;
    printf("%15s: %s\n",    'Domain', $domain);
    printf("%15s: %s\n",    'Root domain', $root_domain );
    printf("%15s: %s\n",    'Public suffix', $etld);
    printf("%15s: %s",      'True TLD', $tld);
    print $hr_bold;
}

print "\n";

SUFFIX: # Get nameservers for the effective tld and the true tld
for (my $i = 0; $i < $#suffixes_to_query + 1; $i++) {
    my $suffix = $suffixes_to_query[$i];
    printf("%s: %s\n", '-=-= Suffix:', ${suffix});
    my @names = get_nameservers($suffix);
    unless (scalar @names) {
        print "No nameservers found for this suffix.\n\n";
        next SUFFIX;
    }
    printf("%s\n", 'Suffix servers:') if $options{'show-servers'};

    A_LOOKUP:
    my @suffix_servers;
    for (my $j = 0; $j < $#names + 1; $j++) {
        my $name = $names[$j];
        my @ips = dns_lookup('A', $name);
        my $ip = $ips[0];
        if ($ip) {
            printf("%-23s %s\n", $name, $ip) if $options{'show-servers'};
            my %pair = ( 'name' => $name, 'ip' => $ip );
            push(@suffix_servers, \%pair);
        }
    }
    print "\n" if $options{'show-servers'};
    unless (@suffix_servers) {
        print 'Error! None of the nameservers for the suffix"' .
                " ${suffixes_to_query[$i]}\" resolve to an IP address.\n";
    }
    else {
        PRUNE_SUFFIX: # Query just one server unless check-all enabled
        unless ($options{'check-all'}) {
            my $high = scalar @suffix_servers;
            my $random_offset = 0 + int rand($high - 1);
            @suffix_servers = ($suffix_servers[$random_offset]);
        }

        IP: # Ask the TLD servers for authoritative nameservers of domain
        foreach my $server (@suffix_servers) {
            my %suffix_server = %{$server};
            my $ip = $suffix_server{'ip'};
            my $name = $suffix_server{'name'};
            if ($options{'verbose'} or scalar @suffix_servers > 1) {
                print $hr if scalar @suffix_servers > 1;
                print "Querying $name ($ip)...\n";
            }
            print suffix_nameserver_report($root_domain, $ip);
        }
        print "\n";
    }
}

# Show nameservers according to NS query
if ($options{'nslookup'}) {
    if ($options{'check-all'}) {
        print "$hr_bold\n";
    }
    print "-=-= Results of NS lookup on domain + A lookup on each NS in result:\n";    
    print ns_lookup_report($root_domain) || "NS records not found!";
}

#
# Subroutines
#
sub process_args {
    Getopt::Long::GetOptions(
        'brief',            \$options{'brief'},
        'check-all',        \$options{'check-all'},
        'debug',            \$options{'debug'},
        'dig',              \$options{'dig'},
        'help',             \$options{'help'},
        'ipv6',             \$options{'ipv6'},
        'manual',           \$options{'manual'},
        'net-dns',          \$options{'net-dns'},
        'nslookup',         \$options{'nslookup'},
        'public-suffix',    \$options{'public-suffix'},
        'resolver=s',      \$options{'resolver'},
        'show-servers',     \$options{'show-servers'},
        'verbose',          \$options{'verbose'},
        'version',          \$options{'version'}
    ) or Pod::Usage::pod2usage(2);

    # Save resolvers being used to a variable for display purposes
    if ($options{'resolver'}) {
        unshift(@resolvers, $options{'resolver'});
    }
    # DEBUGGING:
    #print Dumper(@resolvers) . "\n";exit;

    # Options interdependencies
    if ($options{'debug'}) {
        $options{'verbose'}         = 1;
        $options{'show-servers'}    = 1;
        $options{'brief'}           = 0;
    }
    elsif ($options{'verbose'}) {
        $options{'brief'}           = 0;
    }
    if ($options{'check-all'}) {
        $options{'show-servers'}    = 1;
    }
    if ($options{'dig'}) {
        $options{'net-dns'}         = 0;
    }

    $domain = $ARGV[0] || '';
    $domain =~ s/[\.]+$//; # Remove any trailing dots
    @domain_levels = split(/\./, $domain);
    if (scalar @domain_levels == 1) {
        die "Error: Domain should have at least two parts!\n";
    }
    $tld = $domain_levels[-1];
    $etld = $tld; # Default value, may change

    $options{'help'} = 1 unless $domain && $tld;

    if (!$options{'version'} and ($options{'manual'} or $options{'help'})) {
        require 'Pod/Usage.pm';
        import Pod::Usage;
        Pod::Usage::pod2usage(1) if $options{'help'};
        Pod::Usage::pod2usage(VERBOSE => 2) if $options{'manual'}; 
    }
    print "nscheck $RELEASE.$VERSION\n";
    exit if $options{'version'};
}

# Conditionally use certain modules
# - Domain::PublicSuffix - derive root domain and effective TLD.
# - Net::DNS - perform DNS queries
# - LWP::Simple - perform simple web requests
sub set_module_availability {
    my $availability = shift; # Input hash passed by reference
    foreach my $key (keys %{$availability}) {
        next if $key eq 'Net::DNS' and $options{'dig'};
        next if $key eq 'Domain::PublicSuffix' and ! $options{'public-suffix'};
        $availability->{$key} = import_module_if_found($key);
    }
}

sub download_effective_tld_database {
    return unless ($module_availability{'LWP::Simple'});
    my $file = shift;
    my $url = shift;
    # Download unless the file exists and is less than 7 days old
    unless (-e $file and -M $file < 7) {
        getstore($url, $file);
    }
}

sub get_nameservers {
    my $domain = shift;
    if (! $options{'dig'} and $module_availability{'Net::DNS'}) {
        return get_nameservers_Net_Dns($domain);
    }
    return get_nameservers_dig($domain);
}

sub get_nameservers_Net_Dns {
    my $domain = shift;
    my $res = Net::DNS::Resolver->new(
        nameservers => \@resolvers,
    );
    my $query = $res->query("${domain}.", 'NS');
    my @nameservers;
    if ($query) {
        foreach my $rr (grep { $_->type eq 'NS' } $query->answer) {
            push(@nameservers, $rr->nsdname);
        }
    }
    else {
        warn "query failed: ", $res->errorstring, "\n";
    }
    return @nameservers;
}

sub get_nameservers_dig {
    my $domain = shift;
    my $resolver = get_primary_resolver(\@resolvers);
    my $cmd = "dig NS \@$resolver $domain. +short";
    chomp( my $result = qx($cmd) );
    unless ($result) {
        warn("query failed: \`$cmd\`");
        return;
    }
    $result =~ s/\.$//;
    return unless $result;
    return split(/\.\n/, $result);
}

sub dns_lookup {
    my $type = shift;
    my $domain = shift;
    if (! $options{'dig'} and $module_availability{'Net::DNS'}) {
        return dns_lookup_Net_Dns($type, $domain);
    }
    return dns_lookup_dig($type, $domain);
}

sub dns_lookup_Net_Dns {
    my $type = shift;
    my $domain = shift;
    $type = uc($type);
    $domain = $domain;
    my $res = Net::DNS::Resolver->new(
        nameservers => \@resolvers,
    );
    my $query = $res->query("${domain}.", $type);
    my @answers;
    if ($query) {
        foreach my $rr (grep { $_->type eq $type } $query->answer) {
            if ($type eq 'A' or $type eq 'AAAA') {
                push(@answers, $rr->address);
            }
            else {
                push(@answers, $rr->nsdname) if $rr->nsdname;
            }
        }
    }
    else {
        warn "query failed: ", $res->errorstring, "\n";
    }
    return @answers;
}

sub dns_lookup_dig {
    my $type = shift;
    my $domain = shift;
    my $resolver = get_primary_resolver(\@resolvers);
    my @answers;
    $type = uc($type);
    $domain = $domain;
    $domain =~ s/\.$//;
    my $cmd = "dig ${type} \@$resolver $domain. +short";
    print "$cmd\n" if $options{'debug'};
    chomp( my $result = qx($cmd) );
    if ($result) {
        @answers = split(/\n/, $result);
    }
    else {
        warn("query failed: \`$cmd\`");
    }
    return @answers;
}

sub ns_lookup_report {
    my $domain = shift;
    my @ns_server_names = dns_lookup('NS', $domain);
    my %ns_servers;
    my $result = '';
    foreach my $name (@ns_server_names) {
        my @ips = dns_lookup('A', $name);
        $ns_servers{$name} = \@ips;
    }
    foreach my $key (sort(keys %ns_servers)) {
        $result .= $key;
        foreach my $ip (@{$ns_servers{$key}}) {
            $result .= '   ' . $ip;
        }
        $result .= "\n";
    }
    return $result;
}

sub suffix_nameserver_report {
    my $domain = shift;
    my $ip = shift;
    my $result = '';
    my $sections = '';
    if ($module_availability{'Net::DNS'} and ! $options{'dig'}) {
        $sections = nameserver_sections_from_Net_DNS($domain, $ip);
    } else {
        $sections = nameserver_sections_from_dig($domain, $ip);
    }
    $result .= nameserver_section_to_text(\@{$sections->{'authority'}},
            'authority') . "\n\n" .
            nameserver_section_to_text(\@{$sections->{'additional'}},
                    'additional') . "\n";
    
    # Perform an A lookup on the nameserver names since these might disagree
    # with GLUE records
    if ($options{'nslookup'}) {
        $result .= "\nResults of A lookup on delegated nameserver names:\n";
        my @types = ('A');
        push(@types, 'AAAA') if ($options{'ipv6'});
        foreach my $ns (@{$sections->{'authority'}}) {
            foreach my $type (@types) {
                my $name = $ns->{'nsdname'};
                my @ip = dns_lookup($type, $name);
                $result .= $name . '   ' . ($ip[0] || "no result!") . "\n";
            }
        }
    }
    return $result;
}

sub nameserver_sections_from_dig {
    my $domain = shift;
    my $ip = shift;
    my $cmd = "dig \@$ip A $domain. +noall +authority +additional +comments";
    print "\nUsing dig:\n$cmd\n" if ($options{'verbose'});
    chomp(my $result = qx($cmd));
    my @lines = split(/\n/, $result);
    my @authority_lines = items_between(\@lines, ';; AUTHORITY', '');
    my @additional_lines = items_between(\@lines, ';; ADDITIONAL', '');
    my @authority_hashes = @{hashify_suffix_server_response('authority',
            \@authority_lines)};
    my @additional_hashes = @{hashify_suffix_server_response('additional',
            \@additional_lines)};
    return {
        'authority' => \@authority_hashes,
        'additional' => \@additional_hashes
    };
}

sub nameserver_sections_from_Net_DNS {
    my $domain = shift;
    my $ip = shift;
    my $res = Net::DNS::Resolver->new(
        nameservers => [($ip)],
        recurse => 0,
      	debug => 0,
    );
    my $packet = $res->send("${domain}.", 'A');
    my (@authority_hashes, @additional_hashes);
    for my $rr ($packet) {
        push(@authority_hashes, $rr->authority);
        push(@additional_hashes, $rr->additional);
    }
    return {
        'authority' => \@authority_hashes,
        'additional' => \@additional_hashes
    };
}

sub nameserver_section_to_text {
    my @input = @{$_[0]};
    my $section = $_[1];

    my $format = {};
    $format->{'authority'} = {
        header => 'Delegated nameservers:',
        columns => [ qw(nsdname) ]
    };
    $format->{'additional'} = {
        header => 'Glue records:',
        columns => [ qw(name address) ]
    };
    if ($options{'verbose'}) {
        $format->{'authority'} = {
            header => ';; AUTHORITY SECTION:',
            columns => [ qw(name ttl class type nsdname) ]
        };
        $format->{'additional'} = {
            header => ';; ADDITIONAL SECTION:',
            columns => [ qw(name ttl class type address) ]
        };
    }
    my @out;

    ROW:
    foreach my $line_hash (@input) {
        next ROW if $line_hash->{'type'} eq 'AAAA' and ! $options{'ipv6'};

        COLUMN:
        my @line_array;
        my $line = '';
        foreach my $column_name (@{$format->{$section}->{'columns'}}) {
            if ($line_hash->{$column_name}) {
                push(@line_array, $line_hash->{$column_name});
            }
        }
        if (@line_array) {
            $line = join('   ', @line_array);
        }
        push(@out, $line) if $line;
    }
    push(@out, 'No results found') unless scalar @out;
    unshift(@out, $format->{$section}->{'header'});
    return join("\n", @out);
}

sub hashify_suffix_server_response {
    my $section = $_[0];
    my @input = @{$_[1]};
    my @keys = ('name', 'ttl', 'class', 'type');
    if ($section eq 'authority') {
        push(@keys, 'nsdname');
    }
    else {
        push(@keys, 'address');
    }
    my @out;
    LINE:
    foreach (@input) {
        next if /SOA/;
        my %line_hash;
        my @column_values = split(/\s+/, $_);
            COLUMN:
            for (my $i = 0; $i < $#column_values + 1; $i++) {
                $line_hash{$keys[$i]} = $column_values[$i];
            }
        push(@out, \%line_hash);
    }
    return \@out;
}

sub items_between {
    my @input = @{$_[0]};
    my $start_pattern = $_[1];
    my $end_pattern = $_[2];
    my $filter_pattern = $_[3];
    my @result;
    foreach (@input) {
        if (/^$start_pattern/../^$end_pattern$/) {
            next if /^$start_pattern/ or /^$end_pattern$/;
            if ($filter_pattern) {
                next if /$filter_pattern/;
            }
            push(@result, $_);
        }
    }
    return @result;;
}

sub import_module_if_found {
    my $module = shift;
    eval {
        (my $file = $module) =~ s|::|/|g;
        require $file . '.pm';
        $module->import();
        return 1;
    } or do {
        return 0;
    }
}

sub get_system_resolvers {
    my @result;
    my $net_dns_available = import_module_if_found('Net::DNS');
    if ($net_dns_available) {
        my $res = Net::DNS::Resolver->new;
        @resolvers = $res->nameservers;
    }
    else {
        my $resolver_file = '/etc/resolv.conf';
        if (-e $resolver_file) {
            open SUFFIX_FILE, '<', $resolver_file;
            LINE:
            while (<SUFFIX_FILE>) {
                if (/^nameserver ([0-9\.]+)/) {
                    push @resolvers, $1;
                }
            }
        }
    }
    return @resolvers;
}

sub get_primary_resolver {
    my @resolvers = @{$_[0]};
    return $resolvers[0];
}

sub get_suffixes {
    my $file = shift;
    my $domain = shift;
    
    die 'Missing public suffix database file!' unless (-e $file);

    my @suffixes;
    my @domain_parts = split(/\./, $domain);
    my $tld = $domain_parts[-1];
    my $public_suffix = '';
    open SUFFIX_FILE, '<', $file;
    while (<SUFFIX_FILE>) {

        # Look at just the section pertaining to relavent tld 
        if (/^\/\/ $tld /../^$/) {
            next if /^\/\// or /^$/;
            chomp ( my $rule = $_ );

            my $match_string = $rule;
            $match_string =~ s/^[^a-z]+//;

            next unless ($domain =~ /\b$match_string$/);
            my @match_parts = split(/\./, $match_string);
            if ($rule =~ /^\!/) { # Exception to wildcard rule
                # Remove corresponding wildcard match to which this
                # exception applies
                @suffixes =
                        grep { $_ ne $match_string } @suffixes;
                push(@suffixes, join('.',
                        @match_parts[-scalar @match_parts - 1..-1]));
            }
            elsif ($rule =~ /^\*/) { # Wildcard rule
                push(@suffixes, join('.',
                        @domain_parts[-scalar @match_parts + 1..-1]));
            }
            else {
                push(@suffixes, $match_string);
            }
        }
    }
    return { tld => $tld, possible_suffixes => \@suffixes };
}

__END__

=head1 NAME

nscheck - Queries TLD servers for a domain's nameservers

=head1 SYNOPSIS

  nscheck [options] <domain>

  Help Options:
   --help     Show this scripts help information.
   --manual   Read this scripts manual.
   --version  Show the version number and exit.

=cut


=head1 OPTIONS

=over 16

=item B<--brief>

Show brief output

=item B<--check-all>

Instead of querying just one suffix server, iterate through all servers,
querying each one in turn

=item B<--debug>

Show debugging messages

=item B<--dig>

Use dig to perform DNS queries

=item B<--help>

Show the help information

=item B<--ipv6>

Show ipv6 records in output

=item B<--manual>

Read the manual, with examples.

=item B<--net-dns>

Use Net::DNS perl module to perform DNS queries (default)

=item B<--resolver=<ip>>

Use a specific resolver instead of relying on system defaults

=item B<--show-servers>

List the suffix servers for the corresponding suffix

=item B<--verbose>

Show verbose output

=item B<--version>

Show the version number and exit

=back

=cut


=head1 EXAMPLES

  The following is an example of this script:

 nscheck --verbose --ipv6 myawesomedomain.tld

=cut


=head1 DESCRIPTION


  This program will query the suffix servers that correspond for the
=item B<--show-servers>

List the suffix servers for the corresponding suffix

=item B<--verbose>

Show verbose output

=item B<--version>

Show the version number and exit

=back

=cut


=head1 EXAMPLES

  The following is an example of this script:

 nscheck --verbose --ipv6 myawesomedomain.tld

=cut


=head1 DESCRIPTION


  This program will query the suffix servers that correspond for the
 specified domain. It will attempt to download a database maintained by Mozilla
 to determine the domain's "public suffix" (also called the "effective tld").
 For example, for domain.co.uk, the public suffix is "co.uk" while the true TLD
 is "uk". It will then query both the public suffix servers and the true
 TLD servers to learn the domain's nameservers and glue records.

=cut


=head1 AUTHOR


 Brian Warren
 --
 brian.warren@cpanel.net

 $Id: nscheck,v 0.8 2013/05/27 10:39:00 brian Exp $

=cut
